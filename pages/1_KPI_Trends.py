import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

from src.data import get_facts

st.set_page_config(page_title="KPI & Trends ‚Äî Olist BI", layout="wide")
st.title("üìà KPI —Ç–∞ —Ç—Ä–µ–Ω–¥–∏")

# --- –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–∫—Ç—ñ–≤ (–∫–µ—à)
# 
@st.cache_data(show_spinner=False)
def load_facts(data_dir: str, max_orders: int | None):
    f = get_facts(data_dir, max_orders=max_orders).copy()
    # —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏: —è–∫—â–æ –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º –Ω–∞–±–æ—Ä–æ–º –ø—Ä–∏–π–¥—É—Ç—å —ñ–Ω—à—ñ –ø–æ–ª—è, —è–∫—ñ –Ω–∞–º –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ
    if "purchase_date" not in f.columns:
        ts = pd.to_datetime(f["order_purchase_timestamp"], errors="coerce")
        f["purchase_date"] = ts.dt.date
    if "purchase_dt" not in f.columns:
        f["purchase_dt"] = pd.to_datetime(f["order_purchase_timestamp"], errors="coerce")
    if "ym" not in f.columns:
        f["ym"] = pd.to_datetime(f["purchase_dt"]).dt.to_period("M").astype(str)
    # —Ç–∏–ø–∏ / –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è
    if "gross_revenue" in f.columns:
        f["gross_revenue"] = pd.to_numeric(f["gross_revenue"], errors="coerce").fillna(0.0)
    if "on_time" not in f.columns:
        f["on_time"] = np.nan
    return f

facts = load_facts("data", st.session_state.get("max_orders"))

if facts.empty:
    st.info("–î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ. –ó–∞–π–¥–∏ –Ω–∞ —Ç–∏—Ç—É–ª–∫—É —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä –¥–∂–µ—Ä–µ–ª–æ/–ª—ñ–º—ñ—Ç.")
    st.stop()

# --- —Ñ—ñ–ª—å—Ç—Ä–∏ –ø–µ—Ä—ñ–æ–¥—É + —á–µ–∫–±–æ–∫—Å–∏
min_d, max_d = facts["purchase_date"].min(), facts["purchase_date"].max()
c1, c2, c3 = st.columns([2,1,1])
with c1:
    d1, d2 = st.date_input("–ü–µ—Ä—ñ–æ–¥ –∞–Ω–∞–ª—ñ–∑—É", value=(min_d, max_d),
                           min_value=min_d, max_value=max_d)
with c2:
    last_year_only = st.checkbox("–¢—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—ñ–∫ —É –¥–∞–Ω–∏—Ö", value=False)
with c3:
    use_rolling = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ 7-–¥–µ–Ω–Ω–µ –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è", value=True)
# --- —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è
view = facts.loc[(facts["purchase_date"] >= d1) & (facts["purchase_date"] <= d2)].copy()
if last_year_only and not view.empty:
    last_year = pd.to_datetime(view["purchase_dt"]).dt.year.max()
    view = view[pd.to_datetime(view["purchase_dt"]).dt.year.eq(last_year)].copy()

if view.empty:
    st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö —É –≤–∏–±—Ä–∞–Ω–æ–º—É –ø–µ—Ä—ñ–æ–¥—ñ.")
    st.stop()

# --- KPI (Orders, Revenue, AOV, On-time)
orders_cnt = len(view)
revenue = float(view["gross_revenue"].sum())
aov = revenue / orders_cnt if orders_cnt else 0.0
on_time_rate = view["on_time"].mean() if view["on_time"].notna().any() else np.nan
# --- –≤–∏–≤—ñ–¥ KPI
k1, k2, k3, k4 = st.columns(4)
k1.metric("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è", f"{orders_cnt:,}")
k2.metric("–í–∏—Ä—É—á–∫–∞", f"${revenue:,.0f}")
k3.metric("–°–µ—Ä. —á–µ–∫ (AOV)", f"${aov:,.2f}")
k4.metric("On-time –¥–æ—Å—Ç–∞–≤–∫–∞", f"{on_time_rate*100:,.1f}%" if pd.notnull(on_time_rate) else "‚Äî")

# --- –î–µ–Ω–Ω–∏–π —Ç—Ä–µ–Ω–¥: Orders (bar) + Revenue (line) + MA7 (–ø—É–Ω–∫—Ç–∏—Ä) 
by_day = (view.groupby("purchase_date", as_index=False)
          .agg(orders=("order_id","count"),
               revenue=("gross_revenue","sum")))
if use_rolling and len(by_day) >= 7:
    by_day["orders_ma7"] = by_day["orders"].rolling(7).mean()
    by_day["revenue_ma7"] = by_day["revenue"].rolling(7).mean()
# --- –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –∑ –¥–≤–æ–º–∞ –æ—Å—è–º–∏ Y
fig = make_subplots(specs=[[{"secondary_y": True}]])
fig.add_trace(go.Bar(x=by_day["purchase_date"], y=by_day["orders"], name="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è"),
              secondary_y=False)
fig.add_trace(go.Scatter(x=by_day["purchase_date"], y=by_day["revenue"],
                         name="–í–∏—Ä—É—á–∫–∞", mode="lines"),
              secondary_y=True)
if use_rolling and "orders_ma7" in by_day:
    fig.add_trace(go.Scatter(x=by_day["purchase_date"], y=by_day["orders_ma7"],
                             name="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ä¢ MA7", mode="lines",
                             line=dict(dash="dot")), secondary_y=False)
if use_rolling and "revenue_ma7" in by_day:
    fig.add_trace(go.Scatter(x=by_day["purchase_date"], y=by_day["revenue_ma7"],
                             name="–í–∏—Ä—É—á–∫–∞ ‚Ä¢ MA7", mode="lines",
                             line=dict(dash="dot")), secondary_y=True)
fig.update_layout(title_text="–î–µ–Ω–Ω—ñ —Ç—Ä–µ–Ω–¥–∏: –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (—Å—Ç–æ–≤–ø—Ü—ñ) —Ç–∞ –≤–∏—Ä—É—á–∫–∞ (–ª—ñ–Ω—ñ—è)",
                  margin=dict(t=60, b=40))
fig.update_xaxes(title_text="–î–∞—Ç–∞")
fig.update_yaxes(title_text="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è", secondary_y=False)
fig.update_yaxes(title_text="–í–∏—Ä—É—á–∫–∞, $", secondary_y=True)
st.plotly_chart(fig, use_container_width=True)

# --- –ú—ñ—Å—è—á–Ω—ñ –ø—ñ–¥—Å—É–º–∫–∏: Revenue / Orders / AOV 
by_month = (view.groupby("ym", as_index=False)
            .agg(orders=("order_id","count"),
                 revenue=("gross_revenue","sum")))
by_month["AOV"] = by_month["revenue"] / by_month["orders"]
# --- –î–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∏ –≤ —Ä—è–¥
c1, c2 = st.columns(2)
with c1:
    st.markdown("#### –ú—ñ—Å—è—á–Ω–∞ –≤–∏—Ä—É—á–∫–∞")
    st.plotly_chart(px.bar(by_month, x="ym", y="revenue",
                           labels={"ym":"–ú—ñ—Å—è—Ü—å","revenue":"–í–∏—Ä—É—á–∫–∞, $"},
                           title="–í–∏—Ä—É—á–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—è–º–∏"),
                    use_container_width=True)
with c2:
    st.markdown("#### –ú—ñ—Å—è—á–Ω–∏–π AOV")
    fig_aov = px.line(by_month, x="ym", y="AOV", markers=True, title="AOV –∑–∞ –º—ñ—Å—è—Ü—è–º–∏")
    fig_aov.update_layout(yaxis_title="AOV, $", xaxis_title="–ú—ñ—Å—è—Ü—å")
    st.plotly_chart(fig_aov, use_container_width=True)

# --- –¢–µ–ø–ª–æ–≤–∞ –º–∞–ø–∞: –¥–µ–Ω—å —Ç–∏–∂–Ω—è √ó –≥–æ–¥–∏–Ω–∞ (–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å) 
view["dow"] = pd.to_datetime(view["purchase_dt"]).dt.day_name()
view["hour"] = pd.to_datetime(view["purchase_dt"]).dt.hour
heat = (view.groupby(["dow","hour"]).size().reset_index(name="orders"))
# –∫–ª–∞—Å–∏—á–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è 
dow_order = ["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"]
heat["dow"] = pd.Categorical(heat["dow"], categories=dow_order, ordered=True)
heat = heat.sort_values(["dow","hour"])

st.markdown("#### –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: –¥–µ–Ω—å —Ç–∏–∂–Ω—è √ó –≥–æ–¥–∏–Ω–∞")
heatmap = px.density_heatmap(heat, x="hour", y="dow", z="orders",
                             nbinsx=24, nbinsy=7, histfunc="sum",
                             title="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –≥–æ–¥–∏–Ω–∞–º–∏ —Ç–∞ –¥–Ω—è–º–∏ —Ç–∏–∂–Ω—è")
heatmap.update_layout(xaxis_title="–ì–æ–¥–∏–Ω–∞", yaxis_title="–î–µ–Ω—å —Ç–∏–∂–Ω—è", margin=dict(t=60, b=40))
st.plotly_chart(heatmap, use_container_width=True)

st.caption("–ü–æ—Ä–∞–¥–∞: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø—ñ–∫–æ–≤—ñ –≥–æ–¥–∏–Ω–∏ –¥–ª—è –ø—Ä–æ–º–æ; —Å—Ç–µ–∂—Ç–µ –∑–∞ AOV —ñ on-time –ø—ñ–¥ —á–∞—Å –ø—ñ–∫—ñ–≤.")
