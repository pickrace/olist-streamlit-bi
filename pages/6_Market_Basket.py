
import streamlit as st
import pandas as pd
import numpy as np
from mlxtend.frequent_patterns import apriori, association_rules
import plotly.express as px
import os

st.set_page_config(page_title="Market Basket ‚Äî Olist BI", layout="wide")
st.title("üß∫ Market Basket ‚Äî –∞—Å–æ—Ü—ñ–∞—Ç–∏–≤–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –∑ order_items")

DATA_DIR = "data"

@st.cache_data(show_spinner=False)
def safe_read_csv(path, usecols=None, parse_dates=None, nrows=None):
    if not os.path.exists(path):
        return pd.DataFrame()
    try:
        return pd.read_csv(path, usecols=usecols, parse_dates=parse_dates, encoding="utf-8", nrows=nrows, low_memory=False)
    except Exception:
        return pd.read_csv(path, usecols=usecols, parse_dates=parse_dates, encoding="latin1", nrows=nrows, low_memory=False)

@st.cache_data(show_spinner=False)
def load_orders_items(nrows_orders=None, nrows_items=None):
    orders = safe_read_csv(
        os.path.join(DATA_DIR, "olist_orders_dataset.csv"),
        usecols=["order_id","order_status","order_purchase_timestamp"],
        parse_dates=["order_purchase_timestamp"],
        nrows=nrows_orders
    )
    items = safe_read_csv(
        os.path.join(DATA_DIR, "olist_order_items_dataset.csv"),
        usecols=["order_id","product_id"],
        nrows=nrows_items
    )
    products = safe_read_csv(
        os.path.join(DATA_DIR, "olist_products_dataset.csv"),
        usecols=["product_id","product_category_name"],
        nrows=None
    )
    # –æ–ø—Ü—ñ–π–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∞–Ω–≥–ª.
    trans = safe_read_csv(
        os.path.join(DATA_DIR, "product_category_name_translation.csv"),
        usecols=["product_category_name","product_category_name_english"],
        nrows=None
    )
    if not trans.empty and "product_category_name" in products.columns:
        products = products.merge(trans, on="product_category_name", how="left")
        products["label"] = products["product_category_name_english"].fillna(products["product_category_name"])
    else:
        products["label"] = products.get("product_category_name", "product")
    return orders, items, products

# --- —Ñ—ñ–ª—å—Ç—Ä–∏
orders, items, products = load_orders_items()
if orders.empty or items.empty:
    st.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ order_items –∞–±–æ orders CSV —É –ø–∞–ø—Ü—ñ data/.")
    st.stop()

orders["purchase_date"] = pd.to_datetime(orders["order_purchase_timestamp"], errors="coerce").dt.date
min_d, max_d = orders["purchase_date"].min(), orders["purchase_date"].max()
c1, c2, c3, c4 = st.columns([2,1,1,1])
with c1:
    d1, d2 = st.date_input("–ü–µ—Ä—ñ–æ–¥", value=(min_d, max_d), min_value=min_d, max_value=max_d)
with c2:
    delivered_only = st.checkbox("–¢—ñ–ª—å–∫–∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ñ (delivered)", value=True)
with c3:
    top_products = st.number_input("–û–±–º–µ–∂–∏—Ç–∏ –¢–û–ü –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ (–∑–∞ –∫-—Å—Ç—é –∑–∞–º–æ–≤–ª–µ–Ω—å)", min_value=50, max_value=2000, value=300, step=50)
with c4:
    sample_orders = st.number_input("–û–±–º–µ–∂–∏—Ç–∏ –∫-—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å (–¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ)", min_value=500, max_value=100000, value=20000, step=500)

# –≤—ñ–¥–±—ñ—Ä –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º/–¥–∞—Ç–æ—é
mask = (orders["purchase_date"] >= d1) & (orders["purchase_date"] <= d2)
if delivered_only and "order_status" in orders.columns:
    mask &= orders["order_status"].eq("delivered")
orders_sel = orders.loc[mask, ["order_id","purchase_date"]].copy()

# —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ items –ø–æ –≤—ñ–¥—ñ–±—Ä–∞–Ω–∏—Ö order_id
items_sel = items.merge(orders_sel, on="order_id", how="inner")
# –ø—ñ–¥—Ä—ñ–∑–∞—î–º–æ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–∞–º–æ–≤–ª–µ–Ω—å (–¥–ª—è Cloud)
if len(orders_sel) > sample_orders:
    keep_ids = set(orders_sel["order_id"].head(sample_orders))
    items_sel = items_sel[items_sel["order_id"].isin(keep_ids)].copy()

# –∑–∞–ª–∏—à–∏–º–æ –ª–∏—à–µ –¢–û–ü –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑–∞ —á–∞—Å—Ç–æ—Ç–æ—é –ø–æ—è–≤–∏ –≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è—Ö
prod_freq = (items_sel.groupby("product_id")["order_id"].nunique()
             .sort_values(ascending=False).head(int(top_products)))
items_sel = items_sel[items_sel["product_id"].isin(prod_freq.index)].copy()

if items_sel.empty:
    st.info("–ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–∞–Ω–∏—Ö –∑–∞–º–∞–ª–æ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É. –†–æ–∑—à–∏—Ä—å—Ç–µ –ø–µ—Ä—ñ–æ–¥ –∞–±–æ –∑–±—ñ–ª—å—à—ñ—Ç—å –ª—ñ–º—ñ—Ç–∏.")
    st.stop()

# –ø—ñ–¥–ø–∏—Å–∏ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ: product_id ‚Üí category (–∞–Ω–≥–ª/–ø–æ—Ä—Ç)
prod_map = products.set_index("product_id")["label"].to_dict()
items_sel["item_label"] = items_sel["product_id"].map(prod_map).fillna(items_sel["product_id"])

st.markdown("#### –ü–æ–±—É–¥–æ–≤–∞ –∫–æ—à–∏–∫–∞")
st.write(f"–ó–∞–º–æ–≤–ª–µ–Ω—å —É –≤–∏–±—ñ—Ä—Ü—ñ: **{items_sel['order_id'].nunique():,}**, —Ç–æ–≤–∞—Ä—ñ–≤: **{items_sel['product_id'].nunique():,}**.")

# —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è —É –±—ñ–Ω–∞—Ä–Ω—É –º–∞—Ç—Ä–∏—Ü—é (order √ó product)
basket = (items_sel
          .drop_duplicates(["order_id","product_id"])
          .assign(val=1)
          .pivot_table(index="order_id", columns="product_id", values="val", fill_value=0)
         )

# --- –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ Apriori
st.markdown("#### –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∞—Å–æ—Ü—ñ–∞—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª")
c1, c2, c3 = st.columns(3)
with c1:
    min_support = st.slider("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ (support)", 0.001, 0.05, 0.01, 0.001)
with c2:
    min_conf = st.slider("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤—ñ—Ä–∞ (confidence)", 0.10, 0.90, 0.30, 0.05)
with c3:
    top_n = st.number_input("–°–∫—ñ–ª—å–∫–∏ –ø—Ä–∞–≤–∏–ª –ø–æ–∫–∞–∑–∞—Ç–∏ (Top N)", 10, 200, 50, 10)

# --- Apriori + rules
frequent = apriori(basket, min_support=min_support, use_colnames=True)
if frequent.empty:
    st.info("–ó–∞ –ø–æ—Ç–æ—á–Ω–∏—Ö –ø–æ—Ä–æ–≥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–∏—Ö –Ω–∞–±–æ—Ä—ñ–≤. –ó–º–µ–Ω—à—Ç–µ min_support –∞–±–æ –∑–±—ñ–ª—å—à—ñ—Ç—å –≤–∏–±—ñ—Ä–∫—É.")
    st.stop()

rules = association_rules(frequent, metric="confidence", min_threshold=min_conf)
if rules.empty:
    st.info("–ù–µ–º–∞—î –ø—Ä–∞–≤–∏–ª –∑–∞ –∑–∞–¥–∞–Ω–∏–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º–µ–Ω—à–∏—Ç–∏ min_confidence.")
    st.stop()

def labels(s):
    # –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ frozenset product_id ‚Üí —Å–∏–º–ø–∞—Ç–∏—á–Ω—ñ –Ω–∞–∑–≤–∏ (–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)
    return ", ".join(sorted(prod_map.get(x, str(x)) for x in s))

rules = rules.sort_values(["lift","confidence","support"], ascending=False)
rules["Rule"] = rules["antecedents"].apply(labels) + " ‚Üí " + rules["consequents"].apply(labels)
rules_display = rules[["Rule","support","confidence","lift"]].head(int(top_n)).copy()
rules_display["support"] = rules_display["support"].map(lambda x: f"{100*x:.2f}%")
rules_display["confidence"] = rules_display["confidence"].map(lambda x: f"{100*x:.1f}%")
rules_display["lift"] = rules_display["lift"].map(lambda x: f"{x:.2f}")

st.markdown("#### –¢–æ–ø –∞—Å–æ—Ü—ñ–∞—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª")
st.dataframe(rules_display, use_container_width=True)

# –ü—Ä–æ—Å—Ç–∏–π –≤—ñ–∑—É–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥: –Ω–∞–π—Å–∏–ª—å–Ω—ñ—à—ñ –ø–∞—Ä–∏ (antecedent‚Üíconsequent) –∑–∞ lift
pairs = (rules
         .assign(ante=rules["antecedents"].apply(labels),
                 cons=rules["consequents"].apply(labels))
         .sort_values("lift", ascending=False)
         .head(int(top_n)))
fig = px.bar(pairs, x="lift", y="Rule", orientation="h", title="–¢–æ–ø –ø—Ä–∞–≤–∏–ª –∑–∞ lift")
fig.update_layout(xaxis_title="Lift", yaxis_title="", margin=dict(t=60, b=40))
st.plotly_chart(fig, use_container_width=True)

st.caption("–¢–ª—É–º–∞—á–µ–Ω–Ω—è: support ‚Äî —á–∞—Å—Ç–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å, –¥–µ —Ç—Ä–∞–ø–ª—è—î—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª–æ; confidence ‚Äî –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ —Å–ø—Ä–∞–≤–∞ –∑–∞ —É–º–æ–≤–∏ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–ª—ñ–≤–∞; lift > 1 ‚Äî –ø–æ–∑–∏—Ç–∏–≤–Ω–∞ –∞—Å–æ—Ü—ñ–∞—Ü—ñ—è.")