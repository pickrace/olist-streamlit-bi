
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from src.data import get_facts

st.set_page_config(page_title="Payments ‚Äî Olist BI", layout="wide")

@st.cache_data(show_spinner=False)
def load_facts():
    f = get_facts("data").copy()
    f = f.dropna(subset=["order_purchase_timestamp"])
    f["purchase_date"] = pd.to_datetime(f["order_purchase_timestamp"]).dt.date
    # –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø—Ä–æ–ø—É—Å–∫—ñ–≤
    if "payment_type" not in f.columns:
        f["payment_type"] = "unknown"
    if "installments" not in f.columns:
        f["installments"] = 1
    f["gross_revenue"] = pd.to_numeric(f["gross_revenue"], errors="coerce").fillna(0.0)
    return f

facts = load_facts()

# --- —Ñ—ñ–ª—å—Ç—Ä–∏
min_d, max_d = facts["purchase_date"].min(), facts["purchase_date"].max()
d1, d2 = st.date_input("–ü–µ—Ä—ñ–æ–¥ –∞–Ω–∞–ª—ñ–∑—É", value=(min_d, max_d), min_value=min_d, max_value=max_d)
view = facts.loc[(facts["purchase_date"] >= d1) & (facts["purchase_date"] <= d2)].copy()

st.title("üí≥ Payments ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–ø–ª–∞—Ç —Ç–∞ —ó—Ö –≤–ø–ª–∏–≤")

if view.empty:
    st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö —É –≤–∏–±—Ä–∞–Ω–æ–º—É –ø–µ—Ä—ñ–æ–¥—ñ.")
    st.stop()

orders_cnt = len(view)
revenue = float(view["gross_revenue"].sum())
aov = revenue / orders_cnt if orders_cnt else 0.0

k1, k2, k3 = st.columns(3)
k1.metric("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è", f"{orders_cnt:,}")
k2.metric("–í–∏—Ä—É—á–∫–∞", f"${revenue:,.0f}")
k3.metric("–°–µ—Ä. —á–µ–∫ (AOV)", f"${aov:,.2f}")

st.markdown("#### 1) –¢–∏–ø –æ–ø–ª–∞—Ç–∏ ‚Üí –≤–Ω–µ—Å–æ–∫ —É –≤–∏—Ä—É—á–∫—É —Ç–∞ —á–µ–∫")

pt = (view
      .groupby("payment_type", dropna=False)
      .agg(orders=("order_id", "count"),
           revenue=("gross_revenue", "sum"),
           installments_avg=("installments", "mean"),
           installments_max=("installments", "max"))
      .reset_index())

if "payment_type" in pt.columns:
    # —Å–æ—Ä—Ç—É—î–º–æ –∑–∞ –≤–∏—Ä—É—á–∫–æ—é
    pt = pt.sort_values("revenue", ascending=False)
    pt["AOV"] = pt["revenue"] / pt["orders"]
    pt["share_orders_%"] = 100 * pt["orders"] / pt["orders"].sum()

    # —Ç–∞–±–ª–∏—á–∫–∞ (—á–∏—Ç–∞–±–µ–ª—å–Ω–æ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞)
    disp = pt.copy()
    disp.columns = ["–¢–∏–ø –æ–ø–ª–∞—Ç–∏", "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è", "–í–∏—Ä—É—á–∫–∞", "–°–µ—Ä. –∫-—Å—Ç—å –ø–ª–∞—Ç–µ–∂—ñ–≤", "–ú–∞–∫—Å. –ø–ª–∞—Ç–µ–∂—ñ–≤", "–°–µ—Ä. —á–µ–∫", "–ß–∞—Å—Ç–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å, %"]
    disp["–í–∏—Ä—É—á–∫–∞"] = disp["–í–∏—Ä—É—á–∫–∞"].map(lambda x: f"${x:,.0f}")
    disp["–°–µ—Ä. —á–µ–∫"] = disp["–°–µ—Ä. —á–µ–∫"].map(lambda x: f"${x:,.2f}")
    disp["–°–µ—Ä. –∫-—Å—Ç—å –ø–ª–∞—Ç–µ–∂—ñ–≤"] = disp["–°–µ—Ä. –∫-—Å—Ç—å –ø–ª–∞—Ç–µ–∂—ñ–≤"].map(lambda x: f"{x:.2f}")
    disp["–ß–∞—Å—Ç–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å, %"] = disp["–ß–∞—Å—Ç–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å, %"].map(lambda x: f"{x:.1f}%")

    st.dataframe(disp, use_container_width=True)

    # –≥—Ä–∞—Ñ—ñ–∫: –≤–∏—Ä—É—á–∫–∞ –∑–∞ —Ç–∏–ø–æ–º –æ–ø–ª–∞—Ç–∏ (–≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –±–∞—Ä)
    fig = px.bar(
        pt,
        x="payment_type",
        y="revenue",
        title="–í–∏—Ä—É—á–∫–∞ –∑–∞ —Ç–∏–ø–æ–º –æ–ø–ª–∞—Ç–∏",
        text=pt["revenue"].map(lambda x: f"${x:,.0f}"),
    )
    fig.update_traces(textposition="outside", hovertemplate="<b>%{x}</b><br>–í–∏—Ä—É—á–∫–∞: $%{y:,.0f}<extra></extra>")
    fig.update_layout(
        xaxis_title="–¢–∏–ø –æ–ø–ª–∞—Ç–∏",
        yaxis_title="–í–∏—Ä—É—á–∫–∞, $",
        yaxis_tickformat=",",
        margin=dict(t=60, b=40),
    )
    st.plotly_chart(fig, use_container_width=True)

st.markdown("#### 2) –†–æ–∑—Å—Ç—Ä–æ—á–∫–∏ (installments) ‚Üí —Å–∫—ñ–ª—å–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å —ñ —è–∫–∏–π —á–µ–∫")

inst = (view
        .groupby("installments", dropna=False)
        .agg(orders=("order_id", "count"),
             revenue=("gross_revenue", "sum"))
        .reset_index()
        .sort_values("orders", ascending=False))
inst["AOV"] = inst["revenue"] / inst["orders"]
inst["share_%"] = 100 * inst["orders"] / inst["orders"].sum()

# —Ç–∞–±–ª–∏—Ü—è
inst_disp = inst.copy()
inst_disp.columns = ["–ö-—Å—Ç—å –ø–ª–∞—Ç–µ–∂—ñ–≤", "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è", "–í–∏—Ä—É—á–∫–∞", "–°–µ—Ä. —á–µ–∫", "–ß–∞—Å—Ç–∫–∞, %"]
inst_disp["–í–∏—Ä—É—á–∫–∞"] = inst_disp["–í–∏—Ä—É—á–∫–∞"].map(lambda x: f"${x:,.0f}")
inst_disp["–°–µ—Ä. —á–µ–∫"] = inst_disp["–°–µ—Ä. —á–µ–∫"].map(lambda x: f"${x:,.2f}")
inst_disp["–ß–∞—Å—Ç–∫–∞, %"] = inst_disp["–ß–∞—Å—Ç–∫–∞, %"].map(lambda x: f"{x:.1f}%")
st.dataframe(inst_disp, use_container_width=True)

# –¥–≤–∞ –±–∞—Ä–∏ –ø–æ—Ä—É—á: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å —Ç–∞ AOV
c1, c2 = st.columns(2)
with c1:
    fig1 = px.bar(inst.sort_values("orders", ascending=False),
                  x="installments", y="orders",
                  title="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–ª–∞—Ç–µ–∂—ñ–≤",
                  text="orders")
    fig1.update_traces(textposition="outside", hovertemplate="–ü–ª–∞—Ç–µ–∂—ñ–≤: %{x}<br>–ó–∞–º–æ–≤–ª–µ–Ω—å: %{y:,}<extra></extra>")
    fig1.update_layout(xaxis_title="–ü–ª–∞—Ç–µ–∂—ñ–≤", yaxis_title="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è", margin=dict(t=60, b=40))
    st.plotly_chart(fig1, use_container_width=True)
with c2:
    fig2 = px.bar(inst.sort_values("AOV", ascending=False),
                  x="installments", y="AOV",
                  title="–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫ (AOV) –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–ª–∞—Ç–µ–∂—ñ–≤",
                  text=inst.sort_values("AOV", ascending=False)["AOV"].map(lambda x: f"${x:,.0f}"))
    fig2.update_traces(textposition="outside",
                       hovertemplate="–ü–ª–∞—Ç–µ–∂—ñ–≤: %{x}<br>AOV: $%{y:,.2f}<extra></extra>")
    fig2.update_layout(xaxis_title="–ü–ª–∞—Ç–µ–∂—ñ–≤", yaxis_title="AOV, $", margin=dict(t=60, b=40))
    st.plotly_chart(fig2, use_container_width=True)

st.caption("–ü–æ—è—Å–Ω–µ–Ω–Ω—è: installments ‚Äî –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–ª–∞—Ç–µ–∂—ñ–≤ (1 = –ø–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞, >1 = —Ä–æ–∑—Å—Ç—Ä–æ—á–∫–∞). AOV = –≤–∏—Ä—É—á–∫–∞ / –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")