import duckdb
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

from src.data import get_facts

# -----------------------------
# –¢–∞–π—Ç–ª —ñ –æ–ø–∏—Å —Å—Ç–æ—Ä—ñ–Ω–∫–∏
# -----------------------------
st.set_page_config(page_title="AI-–ê–≥–µ–Ω—Ç ‚Äî Olist BI", layout="wide")
st.title("ü§ñ AI-–∞–≥–µ–Ω—Ç: –≤–∞—à data-copilot")
st.caption("–°—Ç–∞–≤ ‚Äò–ª—é–¥—Å—å–∫—ñ‚Äô –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø–∏—à–∏ –±–µ–∑–ø–µ—á–Ω–∏–π SELECT –ø–æ —Ç–∞–±–ª–∏—Ü—ñ facts.")

# -----------------------------
# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö (–∫–µ—à)
# –ª—ñ–º—ñ—Ç –±–µ—Ä–µ–º–æ –ª–∏—à–µ –∑ session_state['max_orders'].
# –Ø–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞ ‚Üí get_facts(.., max_orders=None) —Ç–æ –±–µ—Ä—É—Ç—å—Å—è –í–°–Ü –¥–∞–Ω—ñ.
# -----------------------------
@st.cache_data(show_spinner=False)
def load_facts(data_dir: str, max_orders: int | None):
    # src.data.get_facts —É–∂–µ —Ä–æ–±–∏—Ç—å —É—Å—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–ª—è (purchase_dt, purchase_date, ym, on_time —Ç–æ—â–æ)
    f = get_facts(data_dir, max_orders=max_orders).copy()
    # —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –≤—ñ–¥ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –∫–æ–ª–æ–Ω–æ–∫ —É –∫–∞—Å—Ç–æ–º–Ω–∏—Ö –Ω–∞–±–æ—Ä–∞—Ö
    if "purchase_date" not in f.columns:
        ts = pd.to_datetime(f["order_purchase_timestamp"], errors="coerce")
        f["purchase_date"] = ts.dt.date
    for c in ["gross_revenue", "delivery_time_h", "delay_h"]:
        if c in f.columns:
            f[c] = pd.to_numeric(f[c], errors="coerce")
    if "on_time" not in f.columns:
        f["on_time"] = np.nan
    return f

facts = load_facts("data", st.session_state.get("max_orders"))

if facts.empty:
    st.error("–î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∂–µ—Ä–µ–ª–∞/Release.")
    st.stop()

# -----------------------------
# –°–∞–π–¥–±–∞—Ä: —Ñ—ñ–ª—å—Ç—Ä–∏ + –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ ROI
# -----------------------------
st.sidebar.header("–§—ñ–ª—å—Ç—Ä–∏ —Ç–∞ –ø—Ä–∏–ø—É—â–µ–Ω–Ω—è")
min_d, max_d = facts["purchase_date"].min(), facts["purchase_date"].max()
d1, d2 = st.sidebar.date_input("–ü–µ—Ä—ñ–æ–¥", value=(min_d, max_d), min_value=min_d, max_value=max_d)
view = facts.loc[(facts["purchase_date"] >= d1) & (facts["purchase_date"] <= d2)].copy()

margin_pct = st.sidebar.number_input("–í–∞–ª–æ–≤–∞ –º–∞—Ä–∂–∞, %", 1, 99, 55)
pickpack_cost = st.sidebar.number_input("–í–∏—Ç—Ä–∞—Ç–∏ —Ñ—É–ª—Ñ—ñ–ª–º–µ–Ω—Ç—É/–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, R$", 0.0, 20.0, 1.2, 0.1)

# -----------------------------
# –°–µ—Ä–≤—ñ—Å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ (—Ç—É–ª–∑–∏ –∞–≥–µ–Ω—Ç–∞)
# -----------------------------
def tool_kpis(df: pd.DataFrame) -> dict:
    """–ë–∞–∑–æ–≤—ñ KPI: –∫-—Å—Ç—å, –≤–∏—Ä—É—á–∫–∞, AOV, on-time%."""
    n = len(df)
    rev = float(df["gross_revenue"].sum()) if "gross_revenue" in df else 0.0
    aov = rev / n if n else 0.0
    on_time = float(df["on_time"].mean()) if "on_time" in df and df["on_time"].notna().any() else None
    return {"orders": n, "revenue": rev, "aov": aov, "on_time_rate": on_time}

def tool_trend(df: pd.DataFrame, rolling_days: int = 7) -> pd.DataFrame:
    """–¢—Ä–µ–Ω–¥ –ø–æ –¥–Ω—è—Ö + –∫–æ–≤–∑–Ω–∞ —Å–µ—Ä–µ–¥–Ω—è."""
    by_day = df.groupby("purchase_date", as_index=False).agg(
        orders=("order_id","count"),
        revenue=("gross_revenue","sum")
    )
    if rolling_days and len(by_day) >= rolling_days:
        by_day["orders_ma"] = by_day["orders"].rolling(rolling_days).mean()
        by_day["revenue_ma"] = by_day["revenue"].rolling(rolling_days).mean()
    return by_day

def tool_payments_breakdown(df: pd.DataFrame) -> pd.DataFrame:
    """–†–æ–∑–∫–ª–∞–¥ –ø–æ –æ–ø–ª–∞—Ç–∞—Ö: —á–∞—Å—Ç–∫–∏, –≤–∏—Ä—É—á–∫–∞, AOV."""
    if "payment_type" not in df.columns:
        return pd.DataFrame()
    g = (df.groupby("payment_type", dropna=False)
           .agg(orders=("order_id","count"), revenue=("gross_revenue","sum"))
           .reset_index().sort_values("revenue", ascending=False))
    g["AOV"] = g["revenue"] / g["orders"]
    g["share_%"] = 100 * g["orders"] / g["orders"].sum()
    return g

def tool_reviews_summary(df: pd.DataFrame) -> pd.DataFrame:
    """–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –æ—Ü—ñ–Ω–æ–∫ –≤—ñ–¥ SLA."""
    if "review_score" not in df.columns:
        return pd.DataFrame()
    g = (df.groupby("review_score", dropna=False)
           .agg(orders=("order_id","count"),
                on_time=("on_time","mean"),
                delivery_time_h=("delivery_time_h","mean"),
                delay_h=("delay_h","mean"))
           .reset_index().sort_values("review_score"))
    return g

def tool_rfm(df: pd.DataFrame) -> pd.DataFrame:
    """–ü—Ä–æ—Å—Ç–∏–π RFM (—è–∫—â–æ –Ω–µ–º–∞ customer_id, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ order_id —è–∫ —Å—É—Ä–æ–≥–∞—Ç –¥–ª—è –¥–µ–º–æ)."""
    if "customer_id" not in df.columns or df["customer_id"].isna().all():
        df = df.copy()
        df["customer_id"] = df["order_id"]
    snapshot = pd.to_datetime(df["purchase_dt"] if "purchase_dt" in df else df["order_purchase_timestamp"]).max() + pd.Timedelta(days=1)
    rfm = (df.groupby("customer_id").agg(
        Recency=("purchase_dt" if "purchase_dt" in df else "order_purchase_timestamp",
                 lambda s: (snapshot - pd.to_datetime(s).max()).days),
        Frequency=("order_id","count"),
        Monetary=("gross_revenue","sum")
    ).reset_index())

    # –∫–≤—ñ–Ω—Ç–∏–ª—å–Ω—ñ –±–∞–ª–∏ (–∑ –∑–∞–ø–∞—Å–æ–º –Ω–∞ –≤–∏—Ä–æ–¥–∂–µ–Ω—ñ —Ä–æ–∑–ø–æ–¥—ñ–ª–∏) 
    def qscore(series, asc):
        try:
            # rank() –∑–Ω—ñ–º–∞—î –ø—Ä–æ–±–ª–µ–º—É –∑ –¥—É–±–ª—ñ–∫–∞—Ç–∞–º–∏
            q = pd.qcut(series.rank(method="first"), 5,
                        labels=[5,4,3,2,1] if asc else [1,2,3,4,5])
            return q.astype(int)
        except Exception:
            return pd.Series([3]*len(series), index=series.index)

    rfm["R"] = qscore(rfm["Recency"], True)
    rfm["F"] = qscore(rfm["Frequency"], False)
    rfm["M"] = qscore(rfm["Monetary"], False)
    rfm["RFM"] = rfm["R"] + rfm["F"] + rfm["M"]
    return rfm

def tool_roi_reduce_late(df: pd.DataFrame, reduce_pp: float, margin_pct: float, pickpack_cost: float) -> dict:
    """–û—Ü—ñ–Ω–∫–∞ –µ—Ñ–µ–∫—Ç—É –≤—ñ–¥ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è —á–∞—Å—Ç–∫–∏ 'late' –Ω–∞ reduce_pp –ø.–ø."""
    if "on_time" not in df.columns or df["on_time"].isna().all():
        return {"note": "on_time –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π —É –≤–∏–±—ñ—Ä—Ü—ñ"}
    late = df[df["on_time"] == False]
    late_rev = float(late["gross_revenue"].sum())
    recaptured_rev = late_rev * (reduce_pp / 100.0)
    profit = recaptured_rev * (margin_pct / 100.0)
    return {"recaptured_revenue": recaptured_rev, "profit": profit}

def tool_sql_query(sql: str, df: pd.DataFrame) -> pd.DataFrame:
    """–ë–µ–∑–ø–µ—á–Ω–∏–π SELECT –ø–æ —Ç–∞–±–ª–∏—Ü—ñ facts (—á–µ—Ä–µ–∑ DuckDB in-memory)."""
    q = sql.strip().lower()
    forbidden = ("drop", "update", "delete", "insert", "alter", "create", "replace")
    if not q.startswith("select") or any(x in q for x in forbidden):
        raise ValueError("–î–æ–∑–≤–æ–ª–µ–Ω—ñ –ª–∏—à–µ –±–µ–∑–ø–µ—á–Ω—ñ SELECT-–∑–∞–ø–∏—Ç–∏.")
    con = duckdb.connect()
    con.register("facts", df)
    out = con.execute(sql).fetch_df()
    con.close()
    return out

# -----------------------------
# LLM —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
# -----------------------------
def have_openai() -> bool:
    try:
        import openai  # noqa: F401
        return bool(st.secrets.get("OPENAI_API_KEY"))
    except Exception:
        return False

def llm_answer(prompt: str, df: pd.DataFrame) -> str:
    """
    –õ–µ–≥–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –≤—ñ–¥ LLM: –∫–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å + –ø–æ—Ä–∞–¥–∞ –¥—ñ—ó.
    –î–∞–Ω—ñ/–≥—Ä–∞—Ñ—ñ–∫–∏ –¥–æ–¥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ –æ–∫—Ä–µ–º–æ (render_tool).
    """
    from openai import OpenAI
    client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
    system = (
        "You are a business analytics copilot for an e-commerce dataset (Olist). "
        "Be concise. When user asks for specific metrics or slices, pick the best tool: "
        "kpis, trend, payments_breakdown, reviews_summary, rfm, roi_reduce_late. "
        "Always include a practical recommendation (process optimization / marketing / SLA)."
    )
    messages = [{"role": "system", "content": system},
                {"role": "user", "content": prompt}]
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            temperature=0.3,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        return f"(LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π) {e}"

# -----------------------------
# –õ–æ–∫–∞–ª—å–Ω–∏–π ¬´—ñ–Ω—Ç–µ–Ω—Ç–æ-—Ä—É—à—ñ–π¬ª (fallback –±–µ–∑ LLM, —è–∫—â–æ —Ä–∞–ø—Ç–æ–º –Ω–µ–º–∞ API –∞–±–æ –∑–∞–∫—ñ–Ω—á–∏–ª–æ—Å—å —Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è)
# -----------------------------
def local_route(prompt: str) -> str:
    p = prompt.lower()
    if any(k in p for k in ["kpi","–∑–∞–º–æ–≤–ª–µ–Ω", "–≤–∏—Ä—É—á–∫", "aov", "—Å–µ—Ä–µ–¥–Ω", "–ø—Ä–∏–±—É—Ç"]):
        return "kpis"
    if any(k in p for k in ["—Ç—Ä–µ–Ω–¥", "–¥–∏–Ω–∞–º—ñ–∫", "–ø–æ –¥–Ω—è—Ö", "time series"]):
        return "trend"
    if any(k in p for k in ["–æ–ø–ª–∞—Ç", "payment", "—Ä–æ–∑—Å—Ç—Ä–æ—á", "installments", "–∫—Ä–µ–¥–∏—Ç"]):
        return "payments_breakdown"
    if any(k in p for k in ["review", "–æ—Ü—ñ–Ω–∫", "–≤—ñ–¥–≥—É–∫", "nps"]):
        return "reviews_summary"
    if "rfm" in p or any(k in p for k in ["—Å–µ–≥–º–µ–Ω—Ç", "–∫–ª—ñ—î–Ω—Ç—Å—å–∫—ñ —Å–µ–≥–º–µ–Ω—Ç–∏"]):
        return "rfm"
    if any(k in p for k in ["–ø—Ä–æ—Å—Ç—Ä–æ—á", "late", "on-time", "sla", "–∑–∞—Ç—Ä–∏–º–∫"]):
        return "roi_reduce_late"
    return "kpis"

# -----------------------------
# –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤/—Ç–∞–±–ª–∏—Ü—å –∑–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ —Ç–æ—â–æ 
# -----------------------------
def render_tool(tool_name: str, df: pd.DataFrame):
    if tool_name == "kpis":
        k = tool_kpis(df)
        c1,c2,c3,c4 = st.columns(4)
        c1.metric("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è", f"{k['orders']:,}")
        c2.metric("–í–∏—Ä—É—á–∫–∞", f"R${k['revenue']:,.0f}")
        c3.metric("AOV", f"R${k['aov']:,.2f}")
        c4.metric("On-time", f"{k['on_time_rate']*100:,.1f}%" if k['on_time_rate'] is not None else "‚Äî")

    elif tool_name == "trend":
        by_day = tool_trend(df, rolling_days=7)
        y_cols = [c for c in ["orders","revenue","orders_ma","revenue_ma"] if c in by_day.columns]
        fig = px.line(by_day, x="purchase_date", y=y_cols, title="–¢—Ä–µ–Ω–¥–∏: –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è/–≤–∏—Ä—É—á–∫–∞ (MA7 ‚Äî –ø—É–Ω–∫—Ç–∏—Ä)")
        # —Ä–æ–±–∏–º–æ MA –ª—ñ–Ω—ñ—ó –ø—É–Ω–∫—Ç–∏—Ä–Ω–∏–º–∏ (—è–∫—â–æ –≤–æ–Ω–∏ —î)
        for tr in fig.data:
            if tr.name in ("orders_ma","revenue_ma"):
                tr.update(line=dict(dash="dash"))
        st.plotly_chart(fig, use_container_width=True)

    elif tool_name == "payments_breakdown":
        t = tool_payments_breakdown(df)
        if t.empty:
            st.info("–£ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î payment_type.")
            return
        disp = t.copy()
        disp["AOV"] = disp["AOV"].map(lambda x: f"R${x:,.2f}")
        disp["revenue"] = disp["revenue"].map(lambda x: f"R${x:,.0f}")
        disp["share_%"] = disp["share_%"].map(lambda x: f"{x:.1f}%")
        st.dataframe(
            disp.rename(columns={"payment_type":"–¢–∏–ø –æ–ø–ª–∞—Ç–∏","orders":"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è","revenue":"–í–∏—Ä—É—á–∫–∞"}),
            use_container_width=True
        )
        st.plotly_chart(
            px.bar(t, x="payment_type", y="revenue", title="–í–∏—Ä—É—á–∫–∞ –∑–∞ —Ç–∏–ø–æ–º –æ–ø–ª–∞—Ç–∏",
                   text=t["revenue"].map(lambda x: f"R${x:,.0f}")),
            use_container_width=True
        )

    elif tool_name == "reviews_summary":
        t = tool_reviews_summary(df)
        if t.empty:
            st.info("–£ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î review_score.")
            return
        t["on_time_%"] = (t["on_time"]*100).round(1)
        disp = t[["review_score","orders","on_time_%","delivery_time_h","delay_h"]].copy()
        disp.columns = ["–û—Ü—ñ–Ω–∫–∞","–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è","On-time, %","–°–µ—Ä. —á–∞—Å –¥–æ—Å—Ç–∞–≤., –≥–æ–¥","–°–µ—Ä. –∑–∞–ø—ñ–∑–Ω., –≥–æ–¥"]
        st.dataframe(disp, use_container_width=True)
        fig = px.line(t, x="review_score", y="on_time", markers=True, title="On-time % vs –æ—Ü—ñ–Ω–∫–∞")
        fig.update_yaxes(tickformat=".0%")
        st.plotly_chart(fig, use_container_width=True)

    elif tool_name == "rfm":
        rfm = tool_rfm(df)
        st.dataframe(rfm.sort_values(["Monetary","Frequency"], ascending=False).head(30), use_container_width=True)
        st.plotly_chart(px.histogram(rfm, x="RFM", nbins=10, title="–†–æ–∑–ø–æ–¥—ñ–ª RFM-—Å—É–º–∏"),
                        use_container_width=True)

    elif tool_name == "roi_reduce_late":
        col = st.columns([1,1,2])
        with col[0]:
            reduce_pp = st.slider("–°–∫–æ—Ä–æ—á–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—å (–ø.–ø.)", 0.0, 20.0, 5.0, 0.5)
        res = tool_roi_reduce_late(df, reduce_pp, margin_pct, pickpack_cost)
        if "note" in res:
            st.info(res["note"])
            return
        c1,c2 = st.columns(2)
        c1.metric("–ü–æ–≤–µ—Ä–Ω—É—Ç–∞ –≤–∏—Ä—É—á–∫–∞", f"R${res['recaptured_revenue']:,.0f}")
        c2.metric("–Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫", f"R${res['profit']:,.0f}")
        st.caption("–û—Ü—ñ–Ω–∫–∞: —É—Å—É–≤–∞—î–º–æ —á–∞—Å—Ç–∏–Ω—É ¬´late¬ª –±–µ–∑ –∑–º—ñ–Ω —É —Ü—ñ–Ω–∞—Ö/–º–∞—Ä–∂—ñ ‚Äî —Ü–µ ¬´–≤—Ä—è—Ç–æ–≤–∞–Ω—ñ¬ª –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")

# -----------------------------
# –ü—ñ–¥–∫–∞–∑–∫–∏ –≤–≤–µ—Ä—Ö—É + —ñ—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—É
# -----------------------------
st.markdown("**–°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Ç:** "
            "`–ø–æ–∫–∞–∂–∏ kpi –∑–∞ —è–∫–∏–π—Å—å –ø–µ—Ä—ñ–æ–¥`, `–¥–∞–π —Ç—Ä–µ–Ω–¥ –ø–æ –• –¥–Ω—è—Ö`, "
            "`—è–∫—ñ —Ç–∏–ø–∏ –æ–ø–ª–∞—Ç–∏ –¥–∞—é—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ –≤–∏—Ä—É—á–∫–∏`, `—è–∫ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤–ø–ª–∏–Ω—É–ª–∞ –Ω–∞ –æ—Ü—ñ–Ω–∫–∏`, "
            "`—è–∫—ñ RFM —Å–µ–≥–º–µ–Ω—Ç–∏ —î —ñ —â–æ –æ–∑–Ω–∞—á–∞—é—Ç—å`, `—è–∫—â–æ –∑–º–µ–Ω—à–∏—Ç–∏ –ø—Ä–æ—Å—Ç—Ä–æ—á–∫–∏ —Ç–æ —è–∫–∏–π –±—É–¥–µ –µ—Ñ–µ–∫—Ç?`")

if "chat" not in st.session_state:
    st.session_state.chat = [{"role": "assistant",
                              "content": "–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—å —É –¥–∞–Ω–∏—Ö —ñ –ø—ñ–¥–∫–∞–∂—É, —â–æ —Ä–æ–±–∏—Ç–∏ –¥–ª—è –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è –±—ñ–∑–Ω–µ—Å—É."}]

for m in st.session_state.chat:
    with st.chat_message(m["role"]):
        st.write(m["content"])

# -----------------------------
# –ê–≤—Ç–æ–∞–Ω–∞–ª—ñ–∑ (3 –∫–æ—Ä–∏—Å–Ω—ñ –∑—Ä—ñ–∑–∏)
# -----------------------------
if st.button("üîç –ê–≤—Ç–æ–∞–Ω–∞–ª—ñ–∑ (3 –∫–æ—Ä–∏—Å–Ω—ñ –∑—Ä—ñ–∑–∏)"):
    candidates = [
        "SELECT payment_type, COUNT(*) AS orders, SUM(gross_revenue) AS revenue FROM facts GROUP BY 1 ORDER BY revenue DESC LIMIT 10",
        "SELECT customer_state, AVG(CASE WHEN on_time THEN 1 ELSE 0 END) AS on_time_rate, COUNT(*) AS orders FROM facts GROUP BY 1 HAVING COUNT(*)>100 ORDER BY on_time_rate ASC LIMIT 10",
        "SELECT strftime(order_purchase_timestamp, '%Y-%m') AS ym, COUNT(*) AS orders, SUM(gross_revenue) AS revenue FROM facts GROUP BY 1 ORDER BY 1"
    ]
    for sql in candidates:
        st.code(sql, language="sql")
        try:
            df_sql = tool_sql_query(sql, view)
            st.dataframe(df_sql, use_container_width=True)
        except Exception as e:
            st.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—å –≤–∏–∫–æ–Ω–∞—Ç–∏: {e}")

# -----------------------------
# –ü—Ä–∏–π–æ–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
# -----------------------------
user_msg = st.chat_input("–ü–æ—Å—Ç–∞–≤ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –¥–∞–Ω—ñ –∞–±–æ –ø–æ–ø—Ä–æ—Å–∏ –ø–æ—Ä–∞–¥–∏.")
if user_msg:
    st.session_state.chat.append({"role": "user", "content": user_msg})
    with st.chat_message("user"):
        st.write(user_msg)

    # 1) –Ø–∫—â–æ —î –∫–ª—é—á OpenAI ‚Äî –æ—Ç—Ä–∏–º—É—î–º–æ ¬´—Ç–µ–∫—Å—Ç–æ–≤—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é¬ª
    answer_text = None
    if have_openai():
        answer_text = llm_answer(user_msg, view)

    # 2) –í–∏–∑–Ω–∞—á–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (LLM –∞–±–æ –ª–æ–∫–∞–ª—å–Ω–∏–π fallback)
    tool = local_route(user_msg)
    with st.chat_message("assistant"):
        if answer_text:
            st.write(answer_text)
        render_tool(tool, view)

    st.session_state.chat.append({"role": "assistant",
                                  "content": answer_text or "(–∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ) –¥–∏–≤. –≥—Ä–∞—Ñ—ñ–∫–∏/—Ç–∞–±–ª–∏—Ü—ñ –≤–∏—â–µ"})
