# 5_üë•_RFM.py
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from src.data import get_facts

st.set_page_config(page_title="RFM ‚Äî Olist BI", layout="wide")

@st.cache_data(show_spinner=False)
def load_facts():
    f = get_facts("data").copy()
    f = f.dropna(subset=["order_purchase_timestamp"])
    f["purchase_date"] = pd.to_datetime(f["order_purchase_timestamp"]).dt.date
    f["gross_revenue"] = pd.to_numeric(f.get("gross_revenue", 0), errors="coerce").fillna(0.0)
    if "customer_id" not in f.columns or f["customer_id"].isna().all():
        # —è–∫—â–æ –Ω–µ–º–∞—î customer_id —É facts ‚Äî –ø–æ–ø–µ—Ä–µ–¥–∂–∞—î–º–æ —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ order_id —è–∫ —Å—É—Ä–æ–≥–∞—Ç (–¥–µ–º–æ)
        f["customer_id"] = f["customer_id"] if "customer_id" in f.columns else f["order_id"]
        st.warning("–£ facts –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π customer_id ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é order_id —è–∫ —Å—É—Ä–æ–≥–∞—Ç –¥–ª—è –¥–µ–º–æ.")
    return f

facts = load_facts()

# --- —Ñ—ñ–ª—å—Ç—Ä–∏
min_d, max_d = facts["purchase_date"].min(), facts["purchase_date"].max()
d1, d2 = st.date_input("–ü–µ—Ä—ñ–æ–¥ –∞–Ω–∞–ª—ñ–∑—É", value=(min_d, max_d), min_value=min_d, max_value=max_d)
view = facts.loc[(facts["purchase_date"] >= d1) & (facts["purchase_date"] <= d2)].copy()

st.title("üë• RFM ‚Äî —Å–µ–≥–º–µ–Ω—Ç–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤")

if view.empty:
    st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö —É –≤–∏–±—Ä–∞–Ω–æ–º—É –ø–µ—Ä—ñ–æ–¥—ñ.")
    st.stop()

snapshot = pd.to_datetime(view["order_purchase_timestamp"]).max() + pd.Timedelta(days=1)

rfm = (view.groupby("customer_id").agg(
    Recency=("order_purchase_timestamp", lambda s: (snapshot - pd.to_datetime(s).max()).days),
    Frequency=("order_id", "count"),
    Monetary=("gross_revenue", "sum")
).reset_index())

def qscore(series: pd.Series, asc: bool) -> pd.Series:
    try:
        # —Ä–∞–Ω–∂—É—î–º–æ, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ –∑–≤'—è–∑–∫–∏, —Ç–æ–¥—ñ –¥—ñ–ª–∏–º–æ –Ω–∞ –∫–≤—ñ–Ω—Ç—ñ–ª—ñ
        q = pd.qcut(series.rank(method="first"),
                    5, labels=[5,4,3,2,1] if asc else [1,2,3,4,5])
        return q.astype(int)
    except Exception:
        return pd.Series([3] * len(series), index=series.index)

rfm["R"] = qscore(rfm["Recency"], asc=True)
rfm["F"] = qscore(rfm["Frequency"], asc=False)
rfm["M"] = qscore(rfm["Monetary"], asc=False)
rfm["RFM"] = rfm["R"] + rfm["F"] + rfm["M"]

def segment(row) -> str:
    r, f, m = row["R"], row["F"], row["M"]
    if r >= 4 and f >= 4 and m >= 4:  return "Champions"
    if r >= 4 and f >= 3:             return "Loyal"
    if r <= 2 and f >= 3:             return "At Risk"
    if r <= 2 and f <= 2 and m <= 2:  return "Hibernating"
    if r >= 4 and f <= 2:             return "New"
    return "Others"

rfm["Segment"] = rfm.apply(segment, axis=1)

# KPI
k1, k2, k3 = st.columns(3)
k1.metric("–ö–ª—ñ—î–Ω—Ç—ñ–≤", f"{rfm['customer_id'].nunique():,}")
k2.metric("–ó–∞–º–æ–≤–ª–µ–Ω—å (—Å—É–º–∞ F)", f"{int(rfm['Frequency'].sum()):,}")
k3.metric("–°—É–º–∞—Ä–Ω–∞ –≤–∏—Ä—É—á–∫–∞ (Monetary)", f"${rfm['Monetary'].sum():,.0f}")

# –ø—ñ–¥—Å—É–º–∫–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö
seg = (rfm.groupby("Segment", as_index=False)
       .agg(customers=("customer_id", "nunique"),
            orders=("Frequency", "sum"),
            monetary=("Monetary", "sum"),
            avg_monetary=("Monetary", "mean"))
       .sort_values("monetary", ascending=False))
seg["share_customers_%"] = 100 * seg["customers"] / seg["customers"].sum()

st.markdown("#### –†–æ–∑–ø–æ–¥—ñ–ª —Å–µ–≥–º–µ–Ω—Ç—ñ–≤ —Ç–∞ –≤–Ω–µ—Å–æ–∫ —É –≤–∏—Ä—É—á–∫—É")
# —Ç–∞–±–ª–∏—Ü—è
seg_disp = seg.copy()
seg_disp.columns = ["–°–µ–≥–º–µ–Ω—Ç", "–ö–ª—ñ—î–Ω—Ç—ñ–≤", "–ó–∞–º–æ–≤–ª–µ–Ω—å", "–í–∏—Ä—É—á–∫–∞", "–°–µ—Ä. –¥–æ—Ö—ñ–¥/–∫–ª—ñ—î–Ω—Ç", "–ß–∞—Å—Ç–∫–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤, %"]
seg_disp["–í–∏—Ä—É—á–∫–∞"] = seg_disp["–í–∏—Ä—É—á–∫–∞"].map(lambda x: f"${x:,.0f}")
seg_disp["–°–µ—Ä. –¥–æ—Ö—ñ–¥/–∫–ª—ñ—î–Ω—Ç"] = seg_disp["–°–µ—Ä. –¥–æ—Ö—ñ–¥/–∫–ª—ñ—î–Ω—Ç"].map(lambda x: f"${x:,.2f}")
seg_disp["–ß–∞—Å—Ç–∫–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤, %"] = seg_disp["–ß–∞—Å—Ç–∫–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤, %"].map(lambda x: f"{x:.1f}%")
st.dataframe(seg_disp, use_container_width=True)

# –≥—Ä–∞—Ñ—ñ–∫–∏: —á–∞—Å—Ç–∫–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤ (pie) + –≤–∏—Ä—É—á–∫–∞ (bar)
c1, c2 = st.columns(2)
with c1:
    figp = px.pie(seg, names="Segment", values="customers", hole=0.45,
                  title="–ß–∞—Å—Ç–∫–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏")
    st.plotly_chart(figp, use_container_width=True)
with c2:
    figb = px.bar(seg.sort_values("monetary", ascending=False),
                  x="Segment", y="monetary",
                  title="–í–∏—Ä—É—á–∫–∞ –∑–∞ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏",
                  text=seg.sort_values("monetary", ascending=False)["monetary"].map(lambda x: f"${x:,.0f}"))
    figb.update_traces(textposition="outside", hovertemplate="%{x}<br>–í–∏—Ä—É—á–∫–∞: $%{y:,.0f}<extra></extra>")
    figb.update_layout(xaxis_title="–°–µ–≥–º–µ–Ω—Ç", yaxis_title="–í–∏—Ä—É—á–∫–∞, $", margin=dict(t=60, b=40))
    st.plotly_chart(figb, use_container_width=True)

st.markdown("#### –¢–û–ü-–∫–ª—ñ—î–Ω—Ç–∏ –∑–∞ —Ü—ñ–Ω–Ω—ñ—Å—Ç—é")
top = rfm.sort_values(["Monetary", "Frequency"], ascending=False).head(50).copy()
top_disp = top[["customer_id", "Recency", "Frequency", "Monetary", "RFM", "Segment"]].rename(
    columns={"customer_id": "–ö–ª—ñ—î–Ω—Ç", "Recency": "Recency (–¥–Ω—ñ–≤)", "Frequency": "Frequency (–∑–∞–º–æ–≤–ª.)",
             "Monetary": "Monetary ($)", "RFM": "RFM —Å—É–º–∞", "Segment": "–°–µ–≥–º–µ–Ω—Ç"}
)
top_disp["Monetary ($)"] = top_disp["Monetary ($)"].map(lambda x: f"${x:,.2f}")
st.dataframe(top_disp, use_container_width=True)

st.caption("RFM: Recency ‚Äî –¥–∞–≤–Ω—ñ—Å—Ç—å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–æ–∫—É–ø–∫–∏ (–º–µ–Ω—à–µ ‚Äî –∫—Ä–∞—â–µ), Frequency ‚Äî —á–∞—Å—Ç–æ—Ç–∞, Monetary ‚Äî –∑–∞–≥–∞–ª—å–Ω–∞ –≥—Ä–æ—à–æ–≤–∞ —Ü—ñ–Ω–Ω—ñ—Å—Ç—å.")
